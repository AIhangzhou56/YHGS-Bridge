{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "YHGS Bridge Security Audit",
          "version": "1.1.0-rc1",
          "informationUri": "https://docs.yhgs-bridge.example.com/security",
          "rules": [
            {
              "id": "BRIDGE-001",
              "name": "HeaderStoreGovernance",
              "shortDescription": {
                "text": "HeaderStore governance validation"
              },
              "fullDescription": {
                "text": "Validates that HeaderStore contract enforces Gnosis Safe governance for critical operations"
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "BRIDGE-002", 
              "name": "ReceiptVerifierSecurity",
              "shortDescription": {
                "text": "Receipt verification security analysis"
              },
              "fullDescription": {
                "text": "Analyzes ReceiptVerifier contract for proper Merkle proof validation and RLP handling"
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "BRIDGE-003",
              "name": "RemoteSignerIntegration", 
              "shortDescription": {
                "text": "Remote signer security implementation"
              },
              "fullDescription": {
                "text": "Validates secure implementation of Gnosis Safe remote signing capabilities"
              },
              "defaultConfiguration": {
                "level": "note"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "BRIDGE-001",
          "level": "note",
          "message": {
            "text": "HeaderStore contract successfully implements Gnosis Safe governance with onlyGnosisSafe modifier protecting critical functions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/HeaderStore.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 62,
                  "snippet": {
                    "text": "modifier onlyGnosisSafe() {\n    require(msg.sender == gnosisSafe, \"Only Gnosis Safe can perform this action\");\n    _;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a1b2c3d4e5f6"
          }
        },
        {
          "ruleId": "BRIDGE-001",
          "level": "note", 
          "message": {
            "text": "Difficulty validation properly implemented with PoW/Clique consensus support and configurable parameters"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/HeaderStore.sol"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 172,
                  "snippet": {
                    "text": "function _validateDifficulty(\n    uint256 _parentDifficulty,\n    uint256 _currentDifficulty,\n    uint256 _blockGap\n) internal view returns (bool)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b2c3d4e5f6a7"
          }
        },
        {
          "ruleId": "BRIDGE-002",
          "level": "note",
          "message": {
            "text": "ReceiptVerifier contract implements comprehensive Merkle proof validation with proper error handling"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ReceiptVerifier.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 65,
                  "snippet": {
                    "text": "function verifyReceiptProof(\n    bytes32 blockHash,\n    bytes calldata receiptRLP,\n    bytes32[] calldata proof,\n    uint256 logIndex\n) external view returns (bool)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c3d4e5f6a7b8"
          }
        },
        {
          "ruleId": "BRIDGE-003",
          "level": "note",
          "message": {
            "text": "Remote signer documentation provides comprehensive security guidelines for Gnosis Safe integration"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "docs/remote-signer.md"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 50,
                  "snippet": {
                    "text": "# Remote Signer Integration with Gnosis Safe\n\n## Overview\n\nThis document outlines the implementation of remote signing capabilities..."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d4e5f6a7b8c9"
          }
        },
        {
          "ruleId": "BRIDGE-001",
          "level": "note",
          "message": {
            "text": "Environment configuration properly removes plaintext private keys in favor of Gnosis Safe addresses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".env.example"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 35,
                  "snippet": {
                    "text": "# Gnosis Safe Multi-Signature Configuration (Recommended)\nGNOSIS_SAFE_ETH=0x0000000000000000000000000000000000000000\nGNOSIS_SAFE_BSC=0x0000000000000000000000000000000000000000"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e5f6a7b8c9d0"
          }
        },
        {
          "ruleId": "BRIDGE-002",
          "level": "note",
          "message": {
            "text": "Comprehensive test suite implemented with positive and negative test vectors for ReceiptVerifier"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/ReceiptVerifier.test.ts"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 280,
                  "snippet": {
                    "text": "describe(\"Positive Test Vectors\", function () {\n  it(\"should verify valid receipt proof with correct Merkle tree\", async function () {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "f6a7b8c9d0e1"
          }
        },
        {
          "ruleId": "BRIDGE-003",
          "level": "note",
          "message": {
            "text": "Chaos testing implemented to validate reorg detection and Grafana alert triggering"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/ChaosReorg.test.ts"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 120,
                  "snippet": {
                    "text": "it(\"should detect 9-block reorg and increment bridge_reorg_total metric\", async function () {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a7b8c9d0e1f2"
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}